devtools::test_coverage()
devtools::test_coverage(pkg = "Bayeshmmcts")
devtools::test_coverage(pkg = "E:\Users\Rafae\Documents\Bayeshmmcts")
devtools::test_coverage(pkg = "E:/Users/Rafae/Documents/Bayeshmmcts")
library(covr) # Test Coverage for Packages
covr::codecov(token = "4e18b403-6e46-4fe9-8f6a-4ed404f480d6")
# Check for win-builder
devtools::check_win_devel()
usethis::use_travis()
1+1
usethis::use_travis()
devtools::test()
devtools::test_coverage()
devtools::run_examples()
devtools::check()
devtools::spell_check()
devtools::spell_check()
library(spelling)
spell_check_files('README.md', lang = 'en_US')
spell_check_files('README.md', lang = 'en_US')
spell_check_package()
roxygen2::roxygenize()
spell_check_package()
update_wordlist()
spell_check_package()
goodpractice::gp()
install.packages("goodpractice")
goodpractice::gp()
nchar("Fast and flexible tool for Bayesian estimation of hidden Markov models using the 'rstan' package, which provides the R interface to the Stan C++ library.")
1:length(5)
1:length(1:5)
seq_along(5)
seq_along(1:5)
seq_len(5)
roxygen2::roxygenize()
install.packages(c("data.table", "glmnet", "parameters"))
nchar("the initial distribution of the Markov chain) to working parameters is simply to convert a constrained optimization problem to an unconstrained one.")
nchar("The purpose of the transformation of the natural parameters (Poisson means, transition probabilities and,")
nchar("The purpose of the transformation of the natural parameters (Poisson means,transition probabilities and,")
nchar("The purpose of the transformation of the natural parameters (Poisson means,")
nchar("The purpose of the transformation of the natural parameters (Poisson means,transition probabilities")
nchar("transition probabilities and, if appropriate, the initial distribution of the")
nchar("Estimate the (natural) parameters of the model by using numerical minimization of")
nchar("Given data o and model mod, this function uses the recursion \eqn{\alpha_{t+1} = \alpha_t A P(o_{t+1})}")
nchar("Given data o and model mod, this function uses the recursion '\eqn{\alpha_{t+1} = \alpha_t A P(o_{t+1})}'")
nchar("Given data o and model mod, this function uses the recursion")
nchar("Given data o and model mod, this function uses the recursion '\eqn{\alpha_{t+1} = \alpha_t A P(o_{t+1})}'")
nchar("Computing state probabilities using log(forward) and log(backward) probabilities.")
nchar("Fit a Bayesian Zero inflated Poisson hidden Markov model with stan,")
roxygen2::roxygenize()
inteRgrate::check_lintr()
devtools::document()
devtools::build_manual()
goodpractice::gp()
nchar("This data contains the total number of homicides and the intentional homicide rate in Colombia")
nchar("This data contains the total number of homicides and the intentional homicide")
nchar("These data describe the number of large forest fires that occurred in Colombia,")
nchar("of Hydrology, Meteorology and Environmental Studies (IDEAM), and the periodicity")
roxygen2::roxygenize()
devtools::check()
devtools::check_win_devel()
1+1
devtools::check_win_devel()
rhub::check_for_cran()
results <- rhub::check_for_cran()
results
results$cran_summary()
results
results$browse()
results$clone()
results$cran_summary()
results$initialize()
results$livelog()
results$print()
results$print()
results$update()
results$urls()
results$web()
results
results$clone()
results$``
results$cran_summary()
results$cran_summary()
results$cran_summary()
rhub::check_for_cran()
devtools::build_manual()
